@namespace BlazorCharts
@inherits ElementSeries<TData>
@typeparam TData

@if (Chart.IsInit)
{
    <g class="bc-bar-series" transform="translate(@Rect.LT.ToPoint())">

        @{
            var color = (Group ?? "Bar").RandomColor().ToHtml();
            var colorStroke = (Group ?? "Bar").RandomColor().Deepen().ToHtml();

            var barCount = Chart.BcSeriesGroup.Series.Where(x => x is BcColumnSeries<TData>).Max(x => ((BcColumnSeries<TData>)x).SequenceNumber);
        }

        @foreach (var category in Chart.CategoryDatas)
        {

            var value = category.SeriesValues[Group];

            var barFillWidth = Chart.BcAxisGroup.AxesX.Rect.W * category.AxesWidthRatio; //分类全部的宽度
            var barCenter = Chart.BcAxisGroup.AxesX.Rect.W * category.AxesZeroRatio;//分类中心位置

            var bar = new Rect();
            bar.H = Chart.BcAxisGroup.AxesYLeft.GetHeightByValue(value);
            bar.W = (int)(((double)1 / (barCount + 1)) * barFillWidth);//始终保证空开一条柱状图
            bar.C = (int)(barCenter - (barFillWidth) / 2 + bar.W * SequenceNumber);
            bar.B = Rect.H;

            <rect x="@bar.X" y="@bar.Y" width="@bar.W" height="@bar.H" fill="@color" stroke="@colorStroke" stroke-width=1
                  class="bc-column-translate" />
        }

    </g>

}

<style>
    .bc-column-translate {
        animation-name: bc-column-animation;
        animation-duration: 1s
    }

    @@keyframes bc-column-animation {
        from {
            height: 0px;
            y: @Rect.H
            }
    }
</style>